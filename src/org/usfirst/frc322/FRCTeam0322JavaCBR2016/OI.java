// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc322.FRCTeam0322JavaCBR2016;

import org.usfirst.frc322.FRCTeam0322JavaCBR2016.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc322.FRCTeam0322JavaCBR2016.XboxController;
import org.usfirst.frc322.FRCTeam0322JavaCBR2016.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftDriveStick;
    public Joystick rightDriveStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public XboxController manipulatorStick;
    
    public JoystickButton allOutButton;
    public JoystickButton ballSuck;
    public JoystickButton ballSpit;
    public JoystickButton stopCollector;
    public JoystickButton shootBall;
    public JoystickButton reverseShooter;
    public JoystickButton stopShooter;

    public OI() {
    	manipulatorStick = new XboxController(2);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        rightDriveStick = new Joystick(1);
        
        leftDriveStick = new Joystick(0);
        
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("SuckBall", new SuckBall());
        SmartDashboard.putData("SpitBall", new SpitBall());
        SmartDashboard.putData("ShootBall", new ShootBall());
        SmartDashboard.putData("ReverseShooter", new ReverseShooter());
        SmartDashboard.putData("StopCollector", new StopCollector());
        SmartDashboard.putData("StopShooter", new StopShooter());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        allOutButton = new JoystickButton(leftDriveStick, 1);
        allOutButton.whileHeld(new AllOutDrive());
        
        ballSuck = new JoystickButton(manipulatorStick, 1);
        ballSuck.whileHeld(new SuckBall());
        ballSpit = new JoystickButton(manipulatorStick, 2);
        ballSpit.whileHeld(new SpitBall());
        stopCollector = new JoystickButton(manipulatorStick, 5);
        stopCollector.whileHeld(new StopCollector());
        
        shootBall = new JoystickButton(manipulatorStick, 3);
        shootBall.whileHeld(new ShootBall());
        reverseShooter = new JoystickButton(manipulatorStick, 4);
        reverseShooter.whileHeld(new ReverseShooter());
        stopShooter = new JoystickButton(manipulatorStick, 6);
        stopShooter.whileHeld(new StopShooter());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getleftDriveStick() {
        return leftDriveStick;
    }

    public Joystick getrightDriveStick() {
        return rightDriveStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getmanipulatorStick() {
        return manipulatorStick;
    }
}
